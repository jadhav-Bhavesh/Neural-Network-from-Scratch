import numpy as np

# Step 1: Sigmoid Activation Function  
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Step 2: Derivative of Sigmoid Activation Function  
def sigmoid_derivative(x):
    return x * (1 - x)

# Step 3: Neural Network Class Definition
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Step 3a: Initialize network layer sizes
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        # Step 3b: Initialize weights and biases with small random values
        self.weights_input_hidden = np.random.uniform(-1, 1, (input_size, hidden_size))
        self.bias_hidden = np.random.uniform(-1, 1, (1, hidden_size))
        self.weights_hidden_output = np.random.uniform(-1, 1, (hidden_size, output_size))
        self.bias_output = np.random.uniform(-1, 1, (1, output_size))

    def forward(self, X):
        # Step 4: Forward pass
        self.input_layer = X
        self.hidden_layer_input = np.dot(self.input_layer, self.weights_input_hidden) + self.bias_hidden
        self.hidden_layer_output = sigmoid(self.hidden_layer_input)
        self.output_layer_input = np.dot(self.hidden_layer_output, self.weights_hidden_output) + self.bias_output
        self.output_layer_output = sigmoid(self.output_layer_input)
        return self.output_layer_output

    def backward(self, X, y, learning_rate):
        # Step 5: Backpropagation
        error_output = y - self.output_layer_output
        output_layer_delta = error_output * sigmoid_derivative(self.output_layer_output)
        error_hidden = output_layer_delta.dot(self.weights_hidden_output.T)
        hidden_layer_delta = error_hidden * sigmoid_derivative(self.hidden_layer_output)
        
        self.weights_hidden_output += self.hidden_layer_output.T.dot(output_layer_delta) * learning_rate
        self.bias_output += np.sum(output_layer_delta, axis=0, keepdims=True) * learning_rate
        self.weights_input_hidden += X.T.dot(hidden_layer_delta) * learning_rate
        self.bias_hidden += np.sum(hidden_layer_delta, axis=0, keepdims=True) * learning_rate

    def train(self, X, y, epochs, learning_rate):
        # Step 6: Training the network
        for epoch in range(epochs):
            self.forward(X)
            self.backward(X, y, learning_rate)
            if epoch % 1000 == 0:
                loss = np.mean(np.square(y - self.output_layer_output))
                print(f"Epoch {epoch} - Loss: {loss}")

# Step 7: Main Program for AND Gate Problem
if __name__ == "__main__":
    # AND Gate Dataset
    X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    y = np.array([[0], [0], [0], [1]])

    # Initialize the neural network
    nn = NeuralNetwork(input_size=2, hidden_size=3, output_size=1)

    # Train the network
    nn.train(X, y, epochs=10000, learning_rate=0.05)

    # Display predictions after training
    print("\nPredictions after training:")
    print(nn.forward(X))
